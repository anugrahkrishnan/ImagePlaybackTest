using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.IO;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Windows.Threading;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private List<string> imagePaths = new List<string>();
        private int currentImageIndex = 0;
        private DispatcherTimer timer;
        private double speedMultiplier = 1;

        public MainWindow()
        {
            InitializeComponent();

            // Initialize the timer
            timer = new DispatcherTimer();
            timer.Tick += Timer_Tick;
        }

        private void BrowseButton_Click(object sender, RoutedEventArgs e)
        {
            // Open file dialog to select images
            OpenFileDialog openFileDialog = new OpenFileDialog
            {
                Multiselect = true,
                Filter = "Image Files|*.jpg;*.jpeg;*.png;*.bmp;*.gif"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                string projectDirectory = AppDomain.CurrentDomain.BaseDirectory;
                string newFolderPath = Path.Combine(projectDirectory, "CopiedImages");
                Directory.CreateDirectory(newFolderPath);

                imagePaths.Clear();

                foreach (string filePath in openFileDialog.FileNames)
                {
                    string fileName = Path.GetFileName(filePath);
                    string destinationPath = Path.Combine(newFolderPath, fileName);
                    File.Copy(filePath, destinationPath, true);
                    imagePaths.Add(destinationPath);
                }

                MessageBox.Show("Images copied successfully!", "Success", MessageBoxButton.OK, MessageBoxImage.Information);
            }
        }

        private void PlayButton_Click(object sender, RoutedEventArgs e)
        {
            if (imagePaths.Count == 0)
            {
                MessageBox.Show("No images to display. Please browse and select images first.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            currentImageIndex = 0;
            UpdateTimerInterval();
            timer.Start();
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            if (imagePaths.Count == 0) return;

            string currentImagePath = imagePaths[currentImageIndex];
            imageContainer.Source = new BitmapImage(new Uri(currentImagePath));

            currentImageIndex = (currentImageIndex + 1) % imagePaths.Count;
        }

        private void FpsSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            // Update the speed multiplier based on the slider value
            speedMultiplier = fpsSlider.Value;
            UpdateTimerInterval();
        }

        private void UpdateTimerInterval()
        {
            // Set the timer interval based on the speed multiplier
            timer.Interval = TimeSpan.FromSeconds(1.0 / speedMultiplier);
        }
    }
}
